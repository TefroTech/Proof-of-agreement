type Agreement = record {
  id : nat64;
  terms : vec text;
  date : text;
  proof_of_agreement : opt record { opt Signature_1; opt Signature_1 };
  by_user : User;
  with_user : User;
};
type Error = variant { NotFound : record { msg : text } };
type Result = variant { Ok : Agreement; Err : Error };
type Signature = record { signatures : vec text };
type Signature_1 = record { value : Signature; agrees_to : Agreement };
type User = record { agreements : vec nat64; identity : text };
service : {
  agree_to : (Agreement) -> (Result);
  check_status : () -> (text) query;
  initiate_agreement : (vec text, text) -> (Result);
  signup_user : () -> (text);
}
